# frozen_string_literal: true

class Task < Sequel::Model
  COST = -> { rand(20..40) }.freeze
  WITHDRAW = -> { rand(10..20) }.freeze

  many_to_one :account, primary_key: :public_id, key: :assignee_public_id

  def self.add(public_id:, assignee_public_id:)
    DB.transaction do
      task = for_update.first(public_id:)
      if task.nil?
        task = create(public_id:, assignee_public_id:, cost: COST.call)
      else
        task.update(cost: COST.call)
      end
      tr = Transaction.create(
        account_public_id: assignee_public_id,
        type: "deposit",
        debit: WITHDRAW.call
      )
      [task, tr]
    end
  end

  def self.close(public_id:)
    DB.transaction do
      task = for_update.first(public_id:)
      raise "Implement retry in 10 minutes" if task.nil?
      raise "Double event" if task.status == "open"
      return if task.cost.nil?

      task.update(status: "closed")
      tr = Transaction.create(
        account_public_id: task.assignee_public_id,
        type: "withdraw",
        credit: task.cost
      )
      [task, tr]
    end
  end

  def self.change_assignee(public_id:, assignee_public_id:)
    DB.transaction do
      task = for_update.first(public_id:)
      task = create(public_id:) if task.nil?

      task.update(assignee_public_id:)
      tr = Transaction.create(
        account_public_id: assignee_public_id,
        type: "deposit",
        debit: WITHDRAW.call
      )
      [task, tr]
    end
  end

  def self.create_or_update(attrs)
    DB.transaction do
      task = for_update.first(public_id: attrs["public_id"])
      task = create(public_id: attrs["public_id"]) if task.nil?
      task.update_fields(attrs, %w[assignee_public_id description jira_id])
    end
  end
end

# Table: tasks
# Columns:
#  id                 | integer       | PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY
#  description        | text          | NOT NULL DEFAULT ''::text
#  status             | task_status   | NOT NULL DEFAULT 'open'::task_status
#  assignee_public_id | uuid          | NOT NULL
#  public_id          | uuid          | NOT NULL DEFAULT gen_random_uuid()
#  cost               | numeric(10,2) | NOT NULL
#  jira_id            | text          | NOT NULL DEFAULT ''::text
# Indexes:
#  tasks_pkey          | PRIMARY KEY btree (id)
#  tasks_public_id_key | UNIQUE btree (public_id)
