# frozen_string_literal: true

class Transaction < Sequel::Model
  dataset_module do
    def today
      now = Time.now
      beginning_of_day = Time.new(now.year, now.month, now.day)
      where(performed_at: beginning_of_day..now)
    end
  end

  def self.top_management_profit(time_period_human)
    now = Time.now
    time_period =
      case time_period_human
      when "today"
        beginning_of_day = Time.new(now.year, now.month, now.day)
        beginning_of_day..now
      when "alltime"
        Time.at(0)..now
      else
        raise "Not implemented"
      end
    where(performed_at: time_period)
      .select { Sequel.as(sum(:debit) - sum(:credit), :dif) }
      .first.values[:dif] || 0
  end

  def self.employee_balance(time_period_human, employee_public_id)
    now = Time.now
    time_period =
      case time_period_human
      when "today"
        beginning_of_day = Time.new(now.year, now.month, now.day)
        beginning_of_day..now
      when "alltime"
        Time.at(0)..now
      else
        raise "Not implemented"
      end
    where(performed_at: time_period)
      .where(account_public_id: employee_public_id)
      .select { Sequel.as(sum(:credit) - sum(:debit), :dif) }
      .first.values[:dif] || 0
  end
end

# Table: transactions
# Columns:
#  id                | bigint                      | PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY
#  public_id         | uuid                        | NOT NULL DEFAULT gen_random_uuid()
#  account_public_id | uuid                        | NOT NULL
#  type              | transaction_type            | NOT NULL
#  performed_at      | timestamp without time zone | NOT NULL DEFAULT now()
#  debit             | integer                     | NOT NULL DEFAULT 0
#  credit            | integer                     | NOT NULL DEFAULT 0
# Indexes:
#  transactions_pkey          | PRIMARY KEY btree (id)
#  transactions_public_id_key | UNIQUE btree (public_id)
