# frozen_string_literal: true

# Migrate

migrate = lambda do |env, version|
  ENV["RACK_ENV"] = env
  require_relative "db"
  require "logger"
  Sequel.extension :migration
  DB.loggers << Logger.new($stdout) if DB.loggers.empty?
  Sequel::Migrator.apply(DB, "migrate", version)
end

desc "Migrate test database to latest version"
task :test_up do
  migrate.call("test", nil)
end

desc "Migrate test database all the way down"
task :test_down do
  migrate.call("test", 0)
end

desc "Migrate test database all the way down and then back up"
task :test_bounce do
  migrate.call("test", 0)
  Sequel::Migrator.apply(DB, "migrate")
end

desc "Migrate development database to latest version"
task :dev_up do
  migrate.call("development", nil)
end

desc "Migrate development database to all the way down"
task :dev_down do
  migrate.call("development", 0)
end

desc "Migrate development database all the way down and then back up"
task :dev_bounce do
  migrate.call("development", 0)
  Sequel::Migrator.apply(DB, "migrate")
end

desc "Migrate production database to latest version"
task :prod_up do
  migrate.call("production", nil)
end

# Shell

irb = proc do |env|
  ENV["RACK_ENV"] = env
  trap("INT", "IGNORE")
  dir, base = File.split(FileUtils::RUBY)
  cmd = if base.sub!(/\Aruby/, "irb")
          File.join(dir, base)
        else
          "#{FileUtils::RUBY} -S irb"
        end
  sh "#{cmd} -r ./models"
end

desc "Open irb shell in test mode"
task :test_irb do
  irb.call("test")
end

desc "Open irb shell in development mode"
task :dev_irb do
  irb.call("development")
end

desc "Open irb shell in production mode"
task :prod_irb do
  irb.call("production")
end

# Specs

spec = proc do |pattern|
  sh "#{FileUtils::RUBY} #{'-w' if RUBY_VERSION >= '3'} -e 'ARGV.each{|f| require f}' #{pattern}"
end

desc "Run all specs"
task default: %i[model_spec web_spec]

desc "Run model specs"
task :model_spec do
  spec.call("./spec/model/*_spec.rb")
end

desc "Run web specs"
task :web_spec do
  spec.call("./spec/web/*_spec.rb")
end

# Other

desc "Annotate Sequel models"
task "annotate" do
  ENV["RACK_ENV"] = "development"
  require_relative "models"
  DB.loggers.clear
  require "sequel/annotate"
  Sequel::Annotate.annotate(Dir["models/**/*.rb"])
end

ADMIN_UUID = "045f2304-dd2d-44fe-bd22-f3bd5aa01e86"
EMPLOYEE1_UUID = "fcf7daa9-2d17-4852-93a5-481f36bbd45d"
EMPLOYEE2_UUID = "f5bd070b-0b3c-43e5-b219-56b909e83e9b"
EMPLOYEE3_UUID = "d70782e6-3156-4986-b441-6425cd469a07"
UNKNOWN_UUID = "7835ff5b-56fc-4266-996b-a873ce3ddc84"
ADMIN_EMAIL = "admin@authn.com"
EMPLOYEE1_EMAIL = "employee1@authn.com"
EMPLOYEE2_EMAIL = "employee2@authn.com"
EMPLOYEE3_EMAIL = "employee3@authn.com"

desc "Seed database with data for testing in development"
task "seed" do
  ENV["RACK_ENV"] = "development"
  require_relative "models"

  DB.transaction do
    Account.truncate(cascade: true)
    Account.create(
      full_name: "Ivan Grozny",
      role: "admin",
      email: ADMIN_EMAIL,
      public_id: ADMIN_UUID
    )
    Account.create(
      full_name: "Ivan Kalita",
      role: "employee",
      email: EMPLOYEE1_EMAIL,
      public_id: EMPLOYEE1_UUID
    )
    Account.create(
      full_name: "Vladimir Veliky",
      role: "employee",
      email: EMPLOYEE2_EMAIL,
      public_id: EMPLOYEE2_UUID
    )
    Account.create(
      full_name: "Vladimir Krasno Solnyshko",
      role: "employee",
      email: EMPLOYEE3_EMAIL,
      public_id: EMPLOYEE3_UUID
    )

    Task.truncate(cascade: true)
    Task.create(assignee_public_id: EMPLOYEE1_UUID, description: "My first task", jira_id: "UBERPOP-42")
    Task.create(assignee_public_id: EMPLOYEE1_UUID, description: "My second task")
    Task.create(assignee_public_id: EMPLOYEE1_UUID, description: "My third task")
    Task.create(assignee_public_id: EMPLOYEE2_UUID, description: "Another task")
    Task.create(assignee_public_id: UNKNOWN_UUID, description: "Some other task")
  end
end
